@using BlazorAccessibilityTests.Shared
@inherits TestContext
@code {
    private IRenderedFragment RenderAccordionWithTwoPanels() 
        => Render(@<AriaAccordion>
                     <AccordionPanel Title="P1">
                       <p>P1 Content</p>
                     </AccordionPanel>
                     <AccordionPanel Title="P2">
                       <p>P2 Content</p>
                     </AccordionPanel>
                   </AriaAccordion>);
    
    private IRenderedFragment RenderAccordionWithFourPanels() 
        => Render(@<AriaAccordion>
                     <AccordionPanel Title="P1">
                       <p>P1 Content</p>
                     </AccordionPanel>
                     <AccordionPanel Title="P2">
                       <p>P2 Content</p>
                     </AccordionPanel>
                     <AccordionPanel Title="P3">
                       <p>P3 Content</p>
                     </AccordionPanel>
                     <AccordionPanel Title="P4">
                       <p>P4 Content</p>
                     </AccordionPanel>
                   </AriaAccordion>);

    [Fact]
    public void FirstRenderMarkupCorrect()
    {
        var cut = RenderAccordionWithTwoPanels();
                
        cut.MarkupMatches(
            @<div id:regex="[\d\w-]+" class="Accordion">
               <h3>
                 <button aria-expanded="true" aria-disabled="" class="Accordion-trigger" aria-controls:regex="[\d\w-]+" id:regex="[\d\w-]+">
                   <span class="Accordion-title">P1
                     <span class="Accordion-icon"></span>
                   </span>
                 </button>
               </h3>
               <div id:regex="[\d\w-]+" role="region" aria-labelledby:regex="[\d\w-]+" class="Accordion-panel">
                 <div>
                   <p>P1 Content</p>
                 </div>
               </div>
               <h3>
                 <button aria-expanded="false" class="Accordion-trigger" aria-controls:regex="[\d\w-]+" id:regex="[\d\w-]+">
                   <span class="Accordion-title">P2
                     <span class="Accordion-icon"></span>
                   </span>
                 </button>
               </h3>
               <div id:regex="[\d\w-]+" aria-labelledby:regex="[\d\w-]+" class="Accordion-panel" hidden="">
                 <div>
                   <p>P2 Content</p>
                 </div>
               </div>
             </div>);
    }

    // Space or Enter
    // When focus is on the accordion header of a collapsed section, expands the section.
    // Note: The Space or Enter buttons trigger an "onclick" event 
    // aria-expanded="true"	button	
    // Set to true when the Accordion panel is expanded, otherwise set to false.
    [Fact(DisplayName = "Set to true when the Accordion panel is expanded, otherwise set to false.")]
    public void AriaExpanedAttribute()
    {
        var cut = RenderAccordionWithTwoPanels();
        var button1 = cut.Find("h3:nth-of-type(1) > button");
        var button2 = cut.Find("h3:nth-of-type(2) > button");

        button2.Click();

        button1.GetAttribute("aria-expanded").Should().Be("false");
        button2.GetAttribute("aria-expanded").Should().Be("true");
    }

    // aria-controls="ID" button	
    // Points to the ID of the panel which the header controls.
    [Fact(DisplayName = "aria-controls=ID Points to the ID of the panel which the header controls.")]
    public void AriaControlsAttribute()
    {
        RenderTree.Add<AriaAccordion>();

        var cut = Render(@<AccordionPanel Title="P1">CONTENT</AccordionPanel>);
        
        var buttonControlsId = cut.Find("button").GetAttribute("aria-controls");
        cut.Find("div").Id.Should().Be(buttonControlsId);            
    }

    // aria-labelledby="IDREF"	div	
    // Defines the accessible name for the region element.
    // References the accordion header button that expands and collapses the region.
    // region elements are required to have an accessible name to be identified as a landmark.
    [Fact(DisplayName = "aria-labelledby=IDREF References the accordion header button that expands and collapses the region.")]
    public void AriaLabelledByAttribute()
    {
        RenderTree.Add<AriaAccordion>();

        var cut = Render(@<AccordionPanel Title="P1">CONTENT</AccordionPanel>);

        var divLabelledById = cut.Find("div").GetAttribute("aria-labelledby");            
        cut.Find("button").Id.Should().Be(divLabelledById);
    }

    // Down Arrow	
    // When focus is on an accordion header, moves focus to the next accordion header.
    // When focus is on last accordion header, moves focus to first accordion header.
    [Fact(DisplayName = "When focus is on an accordion header, Down Arrow moves focus to the next accordion header.")]
    public void DownArrowNavigation()
    {
        var cut = RenderAccordionWithTwoPanels();
        var panels = cut.FindComponents<AccordionPanel>();
        var button1 = panels[0].Find("button");
        var button2 = panels[1].Find("button");

        button1.KeyDown(Key.Down);

        JSInterop.VerifyFocusAsyncInvoke().Arguments[0].ShouldBeElementReferenceTo(button2);
    }

    [Fact(DisplayName = "When focus is on last accordion header, Down Arrow moves focus to first accordion header.")]
    public void DownArrowNavigationLoops()
    {
        var cut = RenderAccordionWithTwoPanels();
        var panels = cut.FindComponents<AccordionPanel>();
        var button1 = panels[0].Find("button");
        var button2 = panels[1].Find("button");

        button2.KeyDown(Key.Down);

        JSInterop.VerifyFocusAsyncInvoke().Arguments[0].ShouldBeElementReferenceTo(button1);
    }

    // Up Arrow	
    // When focus is on an accordion header, moves focus to the previous accordion header.
    // When focus is on first accordion header, moves focus to last accordion header.
    [Fact(DisplayName = "When focus is on last accordion header, moves focus to first accordion header.")]
    public void UpArrowNavigation()
    {
        var cut = RenderAccordionWithTwoPanels();
        var panels = cut.FindComponents<AccordionPanel>();
        var button1 = panels[0].Find("button");
        var button2 = panels[1].Find("button");

        button2.KeyDown(Key.Up);

        JSInterop.VerifyFocusAsyncInvoke().Arguments[0].ShouldBeElementReferenceTo(button1);
    }

    [Fact(DisplayName = "When focus is on last accordion header, moves focus to first accordion header.")]
    public void UpArrowNavigationLoops()
    {
        var cut = RenderAccordionWithTwoPanels();
        var panels = cut.FindComponents<AccordionPanel>();
        var button1 = panels[0].Find("button");
        var button2 = panels[1].Find("button");

        button1.KeyDown(Key.Up);

        JSInterop.VerifyFocusAsyncInvoke().Arguments[0].ShouldBeElementReferenceTo(button2);
    }

    // Home	
    // When focus is on an accordion header, moves focus to the first accordion header.
    [Fact(DisplayName = "When focus is on an accordion header, Home moves focus to the first accordion header.")]
    public void HomeNavigation()
    {
        var cut = RenderAccordionWithFourPanels();
        var panels = cut.FindComponents<AccordionPanel>();
        var button3 = panels[2].Find("button");
        var button1 = panels[0].Find("button");

        button3.KeyDown(Key.Home);

        JSInterop.VerifyFocusAsyncInvoke().Arguments[0].ShouldBeElementReferenceTo(button1);
    }

    // End	
    // When focus is on an accordion header, moves focus to the last accordion header.
    [Fact(DisplayName = "When focus is on an accordion header, End moves focus to the last accordion header.")]
    public void EndNavigation()
    {
        var cut = RenderAccordionWithFourPanels();
        var panels = cut.FindComponents<AccordionPanel>();
        var button2 = panels[1].Find("button");
        var button4 = panels[3].Find("button");

        button2.KeyDown(Key.End);

        JSInterop.VerifyFocusAsyncInvoke().Arguments[0].ShouldBeElementReferenceTo(button4);
    }
}
